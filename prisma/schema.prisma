// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String    @id @default(cuid())
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    registeredFood Food[]
    registeredRecipes Recipe[]
    weeklyPlanner WeeklyPlanner?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Food{
    id           String    @id @default(cuid())
    name         String
    emoji        String
    description  String?
    quantity     Float
    type         String?
    kcal         Float? 
    fat          Float?
    cholesterol  Float?
    sodium       Float?
    potassium    Float?
    carbohydrate Float?
    protein      Float?
    recipes      Recipe[]
    user         User @relation(fields: [userId], references: [id])
    userId       String
}

model Recipe{
    id          String @id @default(cuid())
    name        String
    description String?
    food        Food[]
    steps       RecipeSteps[]
    user        User @relation(fields: [userId], references: [id])
    userId      String
    days        Day[] 
}

model RecipeSteps {
    id          String @id @default(cuid())
    recipe      Recipe @relation(fields: [recipeId], references: [id])
    recipeId    String
    title       String
    description String
}

model WeeklyPlanner {
    id     String @id @default(cuid())
    user   User @relation(fields: [userId], references: [id])
    userId String @unique
    
}

model Day{
    id      String @id @default(cuid())
    name    String
    recipes Recipe[]
}